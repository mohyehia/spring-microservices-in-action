version: '3.8'
services:
  consul:
    container_name: consul-ctr
    image: hashicorp/consul:latest
    restart: unless-stopped
    ports:
      - '8500:8500'
    volumes:
      - ./docker/volumes/consul/data:/consul/data
      - ./docker/volumes/consul/config/consul-config.json:/consul/config/config.json
    command: agent -server -bind 0.0.0.0 -client 0.0.0.0 -bootstrap-expect 1 -config-file=/consul/config/config.json
    extra_hosts:
      - host.docker.internal:host-gateway

  mongo-db:
    container_name: mongo-ctr
    image: mongo:latest
    restart: unless-stopped
    ports:
      - '27017:27017'
    expose:
      - '27017'
    volumes:
      - ./docker/volumes/mongo:/data/db

  postgres-db:
    container_name: postgres-ctr
    image: postgres:16.0
    restart: unless-stopped
    ports:
      - '5432:5432'
    volumes:
      - ./docker/volumes/postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: organization-user
      POSTGRES_PASSWORD: P@ssw0rd
      POSTGRES_DB: organization-db

  redis:
    container_name: redis-ctr
    image: redis:7.2.1
    restart: unless-stopped
    ports:
      - '6379:6379'

  redis-insight:
    container_name: redis-insight-ctr
    image: redislabs/redisinsight:latest
    restart: unless-stopped
    ports:
      - '8001:8001'
    volumes:
      - ./docker/volumes/redis-insights:/db

  prometheus:
    container_name: prometheus-ctr
    image: prom/prometheus:v2.47.0
    restart: unless-stopped
    ports:
      - '9090:9090'
    extra_hosts:
      - host.docker.internal:host-gateway
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./docker/volumes/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    container_name: grafana-ctr
    image: grafana/grafana-oss:10.1.2
    restart: unless-stopped
    ports:
      - '3000:3000'
    volumes:
      - ./docker/volumes/grafana/data:/var/lib/grafana
      - ./docker/volumes/grafana/provisioning/datasources/:/etc/grafana/provisioning/datasources/
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin

  jaeger:
    container_name: jaeger-ctr
    image: jaegertracing/all-in-one:latest
    ports:
      - '4318:4318'
      - '16686:16686'
    environment:
      COLLECTOR_OTLP_ENABLED: true

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.10
    container_name: elasticsearch
    environment:
      node.name: elasticsearch
      discovery.type: single-node
      bootstrap.memory_lock: true
      ES_JAVA_OPTS: -Xms512m -Xmx512m
      ELASTIC_USERNAME: elastic
      ELASTIC_PASSWORD: P@ssw0rd
      xpack.security.enabled: "true"
    volumes:
      - ./docker/volumes/elastic/elasticsearch:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.10
    container_name: kibana
    environment:
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=P@ssw0rd
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    ports:
      - "5601:5601"

  filebeat:
    image: docker.elastic.co/beats/filebeat:7.17.10
    container_name: filebeat
    entrypoint: "filebeat -e -strict.perms=false"
    volumes:
      - ./docker/volumes/elastic/filebeat/filebeat.docker.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./docker/volumes/elastic/filebeat/data:/usr/share/filebeat.data:rw
    user: root
    depends_on:
      - elasticsearch